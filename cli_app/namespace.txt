namespace in C++ | Set 2 (Extending namespace and Unnamed namespace)
Last Updated : 28 Oct, 2022
We have introduced namespaces in below set 1.
Namespace in C++ | Set 1 (Introduction)

Defining a Namespace:

A namespace definition begins with the keyword namespace followed by the namespace name as follows:

namespace  namespace_name 
{
// code declarations i.e. variable  (int a;)
method (void add();)
classes ( class student{};)
}

It is to be noted that, there is no semicolon (;) after the closing brace.
To call the namespace-enabled version of either function or variable, prepend the namespace name as follows:
namespace_name: :code;  // code could be variable , function or class.

The using directive:

You can also avoid prepending of namespaces with the using namespace directive. This directive tells the compiler that the subsequent code is making use of names in the specified namespace. 
The namespace is thus implied for the following code:




#include <iostream>
using namespace std;
// first name space
namespace first_space
{
  void func()
  {
     cout << "Inside first_space" << endl;
  }
}
 
// second name space
namespace second_space
{
  void func()
  {
     cout << "Inside second_space" << endl;
  }
}
using namespace first_space;
int main ()
{
   // This calls function from first name space.
  func();
  return 0;
}
Names introduced in a using directive obey normal scope rules. The name is visible from the point of the using directive to the end of the scope in which the directive is found. Entities with the same name defined in an outer scope are hidden.


Nested Namespaces:

Namespaces can be nested where you can define one namespace inside another name space as follows:

SYNTAX:
namespace namespace_name1 
{
   // code declarations
   namespace namespace_name2 
   {
      // code declarations
   }
}
You can access members of nested namespace by using resolution operators as follows:
// to access members of namespace_name2
using namespace namespace_name1::namespace_name2;
// to access members of namespace:name1
using namespace namespace_name1;

In the above statements if you are using namespace_name1, then it will make elements of namespace_name2 available in the scope as follows:




#include <iostream>
using namespace std;
 
// first name space
namespace first_space
{
  void func()
  {
     cout << "Inside first_space" << endl;
  }
  // second name space
  namespace second_space
  {
     void func()
     {
        cout << "Inside second_space" << endl;
     }
  }
}
using namespace first_space::second_space;
int main ()
{
    // This calls function from second name space.
      func();
   
      return 0;
}
It is also possible to create more than one namespaces in the global space. This can be done in two ways. 
 

namespaces having different names 
 



// A C++ program to show more than one namespaces 
// with different names.
#include <iostream>
using namespace std;
 
// first name space
namespace first
{
   int func() {  return 5; }
}
 
// second name space
namespace second
{
   int func() { return 10; }
}
 
int main()
{
   // member function of namespace
   // accessed using scope resolution operator
   cout << first::func() <<"\n";        
   cout << second::func() <<"\n"; 
   return 0;
}
Output: 
 
5
10
Extending namespaces (Using same name twice) 
It is also possible to create two namespace blocks having the same name. The second namespace block is nothing but actually the continuation of the first namespace. In simpler words, we can say that both the namespaces are not different but actually the same, which are being defined in parts. 
 



// C++ program to demonstrate namespace extension
#include <iostream>
using namespace std;
 
// first name space
namespace first 
{ 
   int val1 = 500;  
}
 
// rest part of the first namespace
namespace  first 
{ 
   int val2 = 501;  
}
 
int main()
{
   cout << first::val1 <<"\n";        
   cout << first::val2 <<"\n"; 
   return 0;
}
Output: 
 
500
501
Unnamed Namespaces 
 

They are directly usable in the same program and are used for declaring unique identifiers.
In unnamed namespaces, name of the namespace in not mentioned in the declaration of namespace.
The name of the namespace is uniquely generated by the compiler.
The unnamed namespaces you have created will only be accessible within the file you created it in.
Unnamed namespaces are the replacement for the static declaration of variables.
 




// C++ program to demonstrate working of unnamed 
// namespaces
#include <iostream>
using namespace std;
 
// unnamed namespace declaration
namespace
{
   int rel = 300; 
}
 
int main()
{
   cout << rel << "\n"; // prints 300
   return 0;
}
Output: 
 

300
 


Winter-time is here and so is the time to skill-up! More than 5,000 learners have now completed their journey from basics of DSA to advanced level development programs such as Full-Stack, Backend Development, Data Science. 

And why go anywhere else when our DSA to Development: Coding Guide will help you master all this in a few months! Apply now to our DSA to Development Program and our counsellors will connect with you for further guidance & support.



Abhinav Tiwari
News

77
Previous Article
Namespace in C++ | Set 1 (Introduction)
Next Article
Namespace in C++ | Set 3 (Accessing, creating header, nesting and aliasing)
Similar Reads
Namespace in C++ | Set 3 (Accessing, creating header, nesting and aliasing)
Namespace in C++ | Set 1 (Introduction) Namespace in C++ | Set 2 (Extending namespace and Unnamed namespace) Different ways to access namespace: In C++, there are two ways of accessing namespace variables and functions. Defining a Namespace: A namespace definition begins with the keyword namespace followed by the namespace name as follows: namespac
5 min read
Check whether the number has only first and last bits set | Set 2
Given a positive integer n, check whether only the first and last bits are set in the binary representation of n. Print 'Yes' or 'No'.Examples: Input: 9 Output: Yes (9)10 = (1001)2, only the first and last bits are set. Input: 15 Output: No (15)10 = (1111)2, except first and last there are other bits also which are set. We have already discussed a
4 min read
Print Binary Tree levels in sorted order | Set 2 (Using set)
Given a tree, print the level order traversal in sorted order. Examples : Input : 7 / \ 6 5 / \ / \ 4 3 2 1 Output : 7 5 6 1 2 3 4 Input : 7 / \ 16 1 / \ 4 13 Output : 7 1 16 4 13 We have discussed a priority queue based solution in below post.Print Binary Tree levels in sorted order | Set 1 (Using Priority Queue) In this post, a set (which is impl
5 min read
Frequent Item set in Data set (Association Rule Mining)
INTRODUCTION:Frequent item sets, also known as association rules, are a fundamental concept in association rule mining, which is a technique used in data mining to discover relationships between items in a dataset. The goal of association rule mining is to identify relationships between items in a dataset that occur frequently together.A frequent i
6 min read
Permutation and Combination | Set-2
Question 1: How many number greater than ten thousand can be formed from the digits 0, 1, 2, 3, 4 without repetition ? Solution : In order to form a number greater than 10000 we should have only 5 digits. Since, we have 5 digits we cannot take 0 in starting position. _ _ _ _ For first digit, we have 4 choices. For second digit, again we have 4 choi
5 min read
SQL using Python and SQLite | Set 2
Databases offer numerous functionalities by which one can manage large amounts of information easily over the web, and high-volume data input and output over a typical file such as a text file. SQL is a query language and is very popular in databases. Many websites use MySQL. SQLite is a "light" version that works over syntax very much similar to S
3 min read
Data Structures and Algorithms | Set 36
Que - 1. The function shiftNode() which takes as input two linked lists- destination and source. It deletes front node from source and places it onto the front of destination. Choose the set of statements which replace X, Y, Z in given function. void shiftNode(struct node** destRoot, struct node** srcRoot) { // the front of source node struct node*
4 min read
Data Structures and Algorithms | Set 37
Que - 1. For 8 keys and 6 slots in a hashing table with uniform hashing and chaining, what is the expected number of items that hash to a particular location. (A) 2.33 (B) 0.75 (C) 1.33 (D) 2 Solution: Probability that key1 ends up in slot 1 = 1/6 Probability that key2 ends up in slot 1 = 1/6 Probability that key3 ends up in slot x = 1/6 Probabilit
4 min read
Segregate even and odd numbers | Set 2
Given an array of integers, segregate even and odd numbers in the array. All the even numbers should be present first, and then the odd numbers. Examples: Input : 1 9 5 3 2 6 7 11 Output : 6 2 3 5 7 9 11 1 Input : 1 3 2 4 7 6 9 10 Output : 10 2 6 4 7 9 3 1 We have discussed one approach in Segregate Even and Odd numbers. In this post, a different s
5 min read
Trigonometry & Height and Distances | Set-2
Question 1: Find the maximum value of (2sinθ + 3 cosθ) Solution : Max value of (asinθ + bcosθ) = √(a2 + b2)) So, max value = √(22 + 32) = √(4 + 9) = √13 Question 2: Find the minimum value of the 4tan2θ + 9cot2θ Solution : Minimum value = √ab Here a = 4 and b = 9 Minimum value = √(4x9) = √36 = 6 Question 3: If θ be an acute angle and 7sin2θ + 3cos2θ
5 min read
Article Tags :
Misc
Practice Tags :
Misc
Trending in News
View More
Ratan Tata Passes Away at 86: A Great Loss for India and the World
Uber to launch AI Assistant Back by OpenAI's GPT-4o to help Drivers Go Electric
10 Best IPTV Services in Sweden (October 2024 Update)
PS5 Digital vs. Disc : Which PlayStation 5 Should You Buy in 2024?
GeeksforGeeks Practice - Leading Online Coding Platform




geeksforgeeks-footer-logo
Corporate & Communications Address:- A-143, 9th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305) | Registered Address:- K 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305
GFG App on Play Store
GFG App on App Store
Company
About Us
Legal
In Media
Contact Us
Advertise with us
GFG Corporate Solution
Placement Training Program
GeeksforGeeks Community
Languages
Python
Java
C++
PHP
GoLang
SQL
R Language
Android Tutorial
Tutorials Archive
DSA
Data Structures
Algorithms
DSA for Beginners
Basic DSA Problems
DSA Roadmap
Top 100 DSA Interview Problems
DSA Roadmap by Sandeep Jain
All Cheat Sheets
Data Science & ML
Data Science With Python
Data Science For Beginner
Machine Learning
ML Maths
Data Visualisation
Pandas
NumPy
NLP
Deep Learning
Web Technologies
HTML
CSS
JavaScript
TypeScript
ReactJS
NextJS
Bootstrap
Web Design
Python Tutorial
Python Programming Examples
Python Projects
Python Tkinter
Web Scraping
OpenCV Tutorial
Python Interview Question
Django
Computer Science
Operating Systems
Computer Network
Database Management System
Software Engineering
Digital Logic Design
Engineering Maths
Software Development
Software Testing
DevOps
Git
Linux
AWS
Docker
Kubernetes
Azure
GCP
DevOps Roadmap
System Design
High Level Design
Low Level Design
UML Diagrams
Interview Guide
Design Patterns
OOAD
System Design Bootcamp
Interview Questions
Inteview Preparation
Competitive Programming
Top DS or Algo for CP
Company-Wise Recruitment Process
Company-Wise Preparation
Aptitude Preparation
Puzzles
School Subjects
Mathematics
Physics
Chemistry
Biology
Social Science
English Grammar
Commerce
World GK
GeeksforGeeks Videos
DSA
Python
Java
C++
Web Development
Data Science
CS Subjects
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
